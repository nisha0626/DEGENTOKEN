// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenGamingToken is ERC20, Ownable {
    string[] private arr;

    constructor() ERC20("Degen_token", "DGN") {
    
        arr = ["Position 1", "Position 2", "Position 3"];
    }

    function redeem(uint _position, uint __price) public {
        require(
            _position < arr.length,
            "Position does not exist"
        );

        require(
            balanceOf(msg.sender) >= __price,
            "Insufficient balance"
        );

        _burn(msg.sender, __price);
        // Add any other logic for redeeming here
    }

    function mint(address account, uint amount) public onlyOwner {
        _mint(account, amount);
    }

    function transferTokens(address _receiver_add, uint amount) external {
        require(balanceOf(msg.sender) >= amount, "Low Balance");
        _approve(msg.sender, _receiver_add, amount);
        _transfer(msg.sender, _receiver_add, amount);
    }

    // Burn tokens (anyone can call)
    function burn(uint amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _burn(msg.sender, amount);
    }

    function getBalance() external view returns (uint) {
        return balanceOf(msg.sender);
    }
}
